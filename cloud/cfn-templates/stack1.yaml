AWSTemplateFormatVersion: "2010-09-09"
Description: Template generated by cfn-skeleton
Parameters: 
  AZParameter: 
    Type: String
    Default: ap-northeast-2a
Resources:
  VPC1:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: app
          Value: test
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AZParameter
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: app
          Value: test
      VpcId: !Ref VPC1
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AZParameter
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: app
          Value: test
      VpcId: !Ref VPC1
  PublicSubnetSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "public subnet security group"
      GroupName: public_subnet_security_group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: publicIngress
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: app
          Value: test
      VpcId: 
        Ref: VPC1
  PrivateSubnetSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "private subnet security group"
      GroupName: private_subnet_security_group
      SecurityGroupEgress: -> allow everything if omit
        - Description: privateEgress
          DestinationSecurityGroupId:
            Ref: PublicSubnetSecurityGroup
          IpProtocol: tcp
        - Description: privateEgress2
          CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: app
          Value: test
      VpcId: 
        Ref: VPC1
  PrivateSubnetSecurityGroupIngressRuleForPublicSubnet:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId:
          Fn::GetAtt:
          - PublicSubnetSecurityGroup
          - GroupId
        GroupId:
          Fn::GetAtt:
          - PrivateSubnetSecurityGroup
          - GroupId
  PrivateSubnetSecurityGroupIngressRuleForBastionHostSubnet:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId:
          Fn::GetAtt:
          - BastionHostSubnetSecurityGroup
          - GroupId
        GroupId:
          Fn::GetAtt:
          - PrivateSubnetSecurityGroup
          - GroupId
  BastionHostSubnetSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "bastionHost subnet security group"
      GroupName: bastionHost_subnet_security_group
      SecurityGroupIngress:
        - CidrIp: 1.235.29.109/24
          Description: bastionHostIngress
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 1.241.146.166/24
          Description: bastionHostIngress2
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: app
          Value: test
      VpcId: 
        Ref: VPC1
  PublicSubnetInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: !Ref AZParameter
      ImageId: ami-0d777f54156eae7d9
      InstanceType: t2.micro
      KeyName: epikem-key1
      SecurityGroupIds:
        - !Ref PublicSubnetSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: app
          Value: test
        - Key: name
          Value: PublicSubnetInstance
  PrivateSubnetInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: !Ref AZParameter
      ImageId: ami-0d777f54156eae7d9
      InstanceType: t2.micro
      KeyName: epikem-key1
      SecurityGroupIds:
        - !Ref PrivateSubnetSecurityGroup
      SubnetId: !Ref PrivateSubnet
      Tags:
        - Key: app
          Value: test
        - Key: name
          Value: PrivateSubnetInstance
  BastionHostSubnetInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      AvailabilityZone: !Ref AZParameter
      ImageId: ami-0d777f54156eae7d9
      InstanceType: t2.micro
      KeyName: epikem-key1
      SecurityGroupIds:
        - !Ref BastionHostSubnetSecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: app
          Value: test
        - Key: name
          Value: BastionHostSubnetInstance
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC1
      InternetGatewayId:
        Ref: InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: app
        Value: test
  NatGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: app
          Value: test
  EIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  PublicSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: app
          Value: test
      VpcId: !Ref VPC1
  PublicSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicInstanceSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet
  PrivateInstanceSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet
  PrivateSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:
        - Key: app
          Value: test
      VpcId: !Ref VPC1
  PrivateSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateSubnetRouteTable
