AWSTemplateFormatVersion: "2010-09-09"

Description: Template generated by cfn-skeleton

Parameters: 
  AZParameter: 
    Type: String
    Default: ap-northeast-2a
    # Type: "AWS::Region"
    # # Default: ap-northeast-2a
    # Default: !Select 
    #   - 0
    #   - Fn::GetAZs: !Ref 'AWS::Region'
    # AllowedValues: 
    #   - Fn::GetAZs: !Ref 'AWS::Region'
    # Description: Enter one of available zones. Please check instance type availability using `aws ec2 describe-instance-type-offerings` command.
Resources:
  VPC1:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      # EnableDnsHostnames: false  # Optional
      # EnableDnsSupport: false  # Optional
      # InstanceTenancy: CHANGEME  # Optional
      Tags:  # Optional
        - Key: app
          Value: test
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      # AssignIpv6AddressOnCreation: false  # Optional
      AvailabilityZone: !Ref AZParameter  # Optional
      CidrBlock: 10.0.0.0/24
      # Ipv6CidrBlock: CHANGEME  # Optional
      MapPublicIpOnLaunch: true  # Optional
      Tags:  # Optional
        - Key: app
          Value: test
      VpcId: !Ref VPC1
      # Name: public-subnet1 # unsupported
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      # AssignIpv6AddressOnCreation: false  # Optional
      AvailabilityZone: !Ref AZParameter  # Optional
      CidrBlock: 10.0.1.0/24
      # Ipv6CidrBlock: CHANGEME  # Optional
      MapPublicIpOnLaunch: false  # Optional
      Tags:  # Optional
        - Key: app
          Value: test
      VpcId: !Ref VPC1
      # Name: private-subnet1 # unsupported
  PublicSubnetSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "public subnet security group"
      GroupName: public_subnet_security_group  # Optional
      # SecurityGroupEgress:  # Optional -> allow everything if omit
      #   - CidrIp: 0.0.0.0/0  # Optional
      #     # CidrIpv6: CHANGEME  # Optional
      #     Description: publicEgress  # Optional
      #     # DestinationPrefixListId: CHANGEME  # Optional
      #     # DestinationSecurityGroupId: CHANGEME  # Optional
      #     # FromPort: 0  # Optional
      #     IpProtocol: tcp
      #     # ToPort: 0  # Optional
      SecurityGroupIngress:  # Optional
        - CidrIp: 0.0.0.0/0
          Description: publicIngress  # Optional
          FromPort: 22  # Optional
          IpProtocol: tcp
          # SourcePrefixListId: CHANGEME  # Optional
          # SourceSecurityGroupId: CHANGEME  # Optional
          # SourceSecurityGroupName: CHANGEME  # Optional
          # SourceSecurityGroupOwnerId: CHANGEME  # Optional
          ToPort: 22  # Optional
      Tags:  # Optional
        - Key: app
          Value: test
      VpcId: 
        Ref: VPC1  # Optional
      # VpcId: !Ref VPC1  # Optional
  PrivateSubnetSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "private subnet security group"
      GroupName: private_subnet_security_group  # Optional
      SecurityGroupEgress:  # Optional -> allow everything if omit
        - Description: privateEgress  # Optional
          # CidrIp: 0.0.0.0/0  # Optional
          # CidrIpv6: CHANGEME  # Optional
          # DestinationPrefixListId: CHANGEME  # Optional
          DestinationSecurityGroupId:
            Ref: PublicSubnetSecurityGroup  # Optional
          FromPort: 0  # Optional
          IpProtocol: tcp
          ToPort: 0  # Optional
      SecurityGroupIngress:  # Optional
        - CidrIp: 0.0.0.0/0
          Description: privateIngress  # Optional
          FromPort: 0  # Optional
          IpProtocol: tcp
          # SourcePrefixListId: CHANGEME  # Optional
          # SourceSecurityGroupId: CHANGEME  # Optional
          # SourceSecurityGroupName: CHANGEME  # Optional
          # SourceSecurityGroupOwnerId: CHANGEME  # Optional
          ToPort: 0  # Optional
      Tags:  # Optional
        - Key: app
          Value: test
      VpcId: 
        Ref: VPC1  # Optional
      # VpcId: !Ref VPC1  # Optional
  BastionHostSubnetSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "bastionHost subnet security group"
      GroupName: bastionHost_subnet_security_group  # Optional
      SecurityGroupIngress:  # Optional
        - CidrIp: 1.235.29.109/24
          Description: bastionHostIngress  # Optional
          FromPort: 22  # Optional
          IpProtocol: tcp
          # SourcePrefixListId: CHANGEME  # Optional
          # SourceSecurityGroupId: CHANGEME  # Optional
          # SourceSecurityGroupName: CHANGEME  # Optional
          # SourceSecurityGroupOwnerId: CHANGEME  # Optional
          ToPort: 22  # Optional
      Tags:  # Optional
        - Key: app
          Value: test
      VpcId: 
        Ref: VPC1  # Optional
      # VpcId: !Ref VPC1  # Optional

  PublicSubnetInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      # AdditionalInfo: CHANGEME  # Optional
      # Affinity: CHANGEME  # Optional
      # AvailabilityZone: !GetAtt PublicSubnet.AvailabilityZone  # Optional
      AvailabilityZone: !Ref AZParameter
      # BlockDeviceMappings:  # Optional
      #   - DeviceName: CHANGEME
      #     Ebs:  # Optional
      #       DeleteOnTermination: false
      #       Encrypted: false
      #       Iops: 0
      #       SnapshotId: CHANGEME
      #       VolumeSize: 0
      #       VolumeType: CHANGEME
      #     NoDevice:  # Optional
      #       {}
      #     VirtualName: CHANGEME  # Optional
      # CreditSpecification:
      #   CPUCredits: CHANGEME  # Optional
      # DisableApiTermination: false  # Optional
      # EbsOptimized: false  # Optional
      # ElasticGpuSpecifications:  # Optional
      #   - Type: CHANGEME
      # ElasticInferenceAccelerators:  # Optional
      #   - Type: CHANGEME
      # HostId: CHANGEME  # Optional
      # IamInstanceProfile: CHANGEME  # Optional
      ImageId: ami-0d777f54156eae7d9  # Optional
      # InstanceInitiatedShutdownBehavior: CHANGEME  # Optional
      InstanceType: t2.micro  # Optional
      # Ipv6AddressCount: 0  # Optional
      # Ipv6Addresses:  # Optional
      #   - Ipv6Address: CHANGEME
      # KernelId: CHANGEME  # Optional
      KeyName: epikem-key1  # Optional
      # LaunchTemplate:
      #   LaunchTemplateId: CHANGEME  # Optional
      #   LaunchTemplateName: CHANGEME  # Optional
      #   Version: CHANGEME
      # LicenseSpecifications:  # Optional
      #   - LicenseConfigurationArn: CHANGEME
      # Monitoring: false  # Optional
      # NetworkInterfaces:  # Optional
      #   - AssociatePublicIpAddress: false  # Optional
      #     DeleteOnTermination: false  # Optional
      #     Description: CHANGEME  # Optional
      #     DeviceIndex: CHANGEME
      #     GroupSet:  # Optional
      #       - CHANGEME
      #     Ipv6AddressCount: 0  # Optional
      #     Ipv6Addresses:  # Optional
      #       - Ipv6Address: CHANGEME
      #     NetworkInterfaceId: CHANGEME  # Optional
      #     PrivateIpAddress: CHANGEME  # Optional
      #     PrivateIpAddresses:  # Optional
      #       - Primary: false
      #         PrivateIpAddress: CHANGEME
      #     SecondaryPrivateIpAddressCount: 0  # Optional
      #     SubnetId: CHANGEME  # Optional
      # PlacementGroupName: CHANGEME  # Optional
      # PrivateIpAddress: CHANGEME  # Optional
      # RamdiskId: CHANGEME  # Optional
      SecurityGroupIds:  # Optional
        - !Ref PublicSubnetSecurityGroup
      # SecurityGroups:  # Optional
      #   - CHANGEME
      # SourceDestCheck: false  # Optional
      # SsmAssociations:  # Optional
      #   - AssociationParameters:  # Optional
      #       - Key: CHANGEME
      #         Value:
      #           - CHANGEME
      #     DocumentName: CHANGEME
      SubnetId: !Ref PublicSubnet  # Optional
      Tags:  # Optional
        - Key: app
          Value: test
      # Tenancy: CHANGEME  # Optional
      # UserData: CHANGEME  # Optional
      # Volumes:  # Optional
      #   - Device: CHANGEME
      #     VolumeId: CHANGEME
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC1
      InternetGatewayId:
        Ref: InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: app
        Value: test
  NatGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId #####
      SubnetId: !Ref PublicSubnet
      Tags:  # Optional
        - Key: app
          Value: test
  EIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc  # Optional
      # InstanceId: CHANGEME  # Optional
      # PublicIpv4Pool: CHANGEME  # Optional
  # EIP1Association:
  #   Type: "AWS::EC2::EIPAssociation"
  #   Properties:
  #     AllocationId: !Ref NatGateway1  # Optional
  #     EIP: !Ref EIP1  # Optional
  #     # InstanceId: CHANGEME  # Optional
  #     # NetworkInterfaceId: !GetAtt NatGateway1.AllocationId   # Optional ####
  #     # PrivateIpAddress: CHANGEME  # Optional

  PublicSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:  # Optional
        - Key: app
          Value: test
      VpcId: !Ref VPC1
  PublicSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0  # Optional
      # DestinationIpv6CidrBlock: CHANGEME  # Optional
      # EgressOnlyInternetGatewayId: CHANGEME  # Optional
      GatewayId: !Ref InternetGateway  # Optional
      # InstanceId: CHANGEME  # Optional
      # NatGatewayId: !Ref NatGateway1  # Optional
      # NetworkInterfaceId: CHANGEME  # Optional
      RouteTableId: !Ref PublicSubnetRouteTable
      # TransitGatewayId: CHANGEME  # Optional
      # VpcPeeringConnectionId: CHANGEME  # Optional

  PublicInstanceSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateInstanceSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      SubnetId: !Ref PrivateSubnet
  PrivateSubnetRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      Tags:  # Optional
        - Key: app
          Value: test
      VpcId: !Ref VPC1
  PrivateSubnetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0  # Optional
      # DestinationIpv6CidrBlock: CHANGEME  # Optional
      # EgressOnlyInternetGatewayId: CHANGEME  # Optional
      # GatewayId: CHANGEME  # Optional
      # InstanceId: CHANGEME  # Optional
      NatGatewayId: !Ref NatGateway1  # Optional
      # NetworkInterfaceId: CHANGEME  # Optional
      RouteTableId: !Ref PrivateSubnetRouteTable
      # TransitGatewayId: CHANGEME  # Optional
      # VpcPeeringConnectionId: CHANGEME  # Optional









  ## https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html
  # AutoScalingLaunchConfiguration1:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     ImageId: ami-0ff8a91507f77f867
  #     SecurityGroups:
  #     - Ref: myEC2SecurityGroup
  #     - myExistingEC2SecurityGroup
  #     InstanceType: m1.small
  #     BlockDeviceMappings:
  #     - DeviceName: "/dev/sdk"
  #       Ebs:
  #         VolumeSize: '50'
  #     - DeviceName: "/dev/sdc"
  #       VirtualName: ephemeral0